> #Nombre: Estefany Paredes
> 
> ############################
> #PRIMERA FORMA
> ############################
> #Factorial_loop
> 
> Factorial_loop<-function(x){
+   if(x<0){
+     stop("Factorials can only be computed when x is equal to, or greater than, zero")
+   }
+   
+   if(x == 0){
+     return(1)
+   } else{
+     y <- 1
+     for(i in 1:x){
+       y <- y * ((1:x)[i])
+     }
+     return(y)
+   }
+ }
> 
> ############################
> #sEGUNDA FORMA
> ############################
> #Factorial_reduce
> 
> Factorial_reduce <- function(x){
+   
+   if(x < 0){
+     stop("Factorials can only be computed when x is equal to, or greater than, zero")
+   }
+   
+   # ensure purrr package is installed
+   if (!require('purrr', quietly = TRUE)) {
+     stop('Please install the purrr package')
+   }
+   
+   if(x == 0){
+     return(1)
+   } else{
+     reduce(as.numeric(1:x), `*`) %>% return()
+   }
+ }
> 
> ############################
> #TERCERA FORMA
> ############################
> #Factorial_func
> 
> Factorial_func <- function(x){
+   
+   if(x < 0){
+     stop("Factorials can only be computed when x is equal to, or greater than, zero")
+   }
+   
+   if (x == 0){
+     return (1)
+   } else{
+     return (x * Factorial_func(x-1))
+   }          
+ }
> 
> ############################
> #CUARTA FORMA
> ############################
> #Factorial_mem
> 
> memoization <- function(){
+   
+   values <- 1
+   
+   Factorial_mem <- function(x){
+     
+     if(x < 0){
+       stop("Factorials can only be computed when x is equal to, or greater than, zero")
+     }
+     
+     if (x == 0 | x == 1){
+       return(1)
+     } 
+     
+     if (length(values) < x){
+       values <<- `length<-`(values, x)
+     }
+     
+     if (!is.na(values[x])){
+       return(values[x])
+     }
+     #calculate new values
+     values[x] <<- x * factorial(x-1)
+     values[x]
+   }
+   Factorial_mem
+ }
> 
> Factorial_mem <- memoization()
> 
> # benchmarking these four functions
> library(microbenchmark)
> microbenchmark(
+   Factorial_loop(5),
+   Factorial_reduce(5),
+   Factorial_func(5),
+   Factorial_mem(5)
+ )
Unit: microseconds
                expr     min      lq      mean   median       uq       max neval
   Factorial_loop(5)   1.140   1.711 115.64981   2.8510   3.9915 11216.018   100
 Factorial_reduce(5) 292.503 309.893 490.24127 351.5165 444.1710  8790.470   100
   Factorial_func(5)   2.851   3.991  74.20917   4.5620   6.8420  6886.638   100
    Factorial_mem(5)   4.562   5.702   9.60204   7.4130  11.4040    47.325   100
> 
> microbenchmark(
+   Factorial_loop(15),
+   Factorial_reduce(15),
+   Factorial_func(15),
+   Factorial_mem(15)
+ )
Unit: microseconds
                 expr     min       lq      mean  median       uq     max neval
   Factorial_loop(15)   2.851   3.7065   4.75550   4.562   5.1320   9.123   100
 Factorial_reduce(15) 304.477 330.4195 358.30724 335.837 351.8015 596.409   100
   Factorial_func(15)   8.552   9.6930  11.67179  10.834  11.9740  31.360   100
    Factorial_mem(15)   4.561   5.7015   7.66910   7.413   8.5530  22.807   100
> 
> microbenchmark(
+   Factorial_loop(50),
+   Factorial_reduce(50),
+   Factorial_func(50),
+   Factorial_mem(50)
+ )
Unit: microseconds
                 expr     min      lq      mean  median       uq     max neval
   Factorial_loop(50)  10.263  11.974  14.75073  13.114  15.6800  30.220   100
 Factorial_reduce(50) 338.117 368.337 427.14507 383.161 436.4730 794.832   100
   Factorial_func(50)  31.930  34.496  40.99045  35.922  44.1890  78.685   100
    Factorial_mem(50)   4.562   6.843   9.80729   8.553  10.8335  60.439   100